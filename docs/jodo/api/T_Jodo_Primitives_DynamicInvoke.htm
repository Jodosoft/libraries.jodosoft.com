<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>DynamicInvoke Class</title><meta name="Title" content="DynamicInvoke" /><meta name="Help.Id" content="T:Jodo.Primitives.DynamicInvoke" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Jodo.Primitives" /><meta name="guid" content="T_Jodo_Primitives_DynamicInvoke" /><meta name="Description" content="Provides static methods for invoking operators using reflection." /><meta name="tocFile" content="../toc/IDF.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://jodo.dev/"><img alt="Jodo" style="height: 48px; width: 44px;" src="../icons/Icon.png" /></a></div><div id="DocumentationTitle" class="level-item">Jodo</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Dynamic<wbr />Invoke Class</h1><div class="summary">
                Provides static methods for invoking operators using reflection.
            </div><h2 class="quickLinkHeader">Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Jodo_Primitives.htm">Jodo.Primitives</a><br /><strong>Assembly:</strong> Jodo.Primitives (in Jodo.Primitives.dll) Version: 1.1.0-preview1+c03fb63566401796ff4810be4e2e2bacdb74ba49<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button><a href="https://github.com/JosephJShort/Jodo/blob/main/src/Jodo.Primitives/DynamicInvoke.cs" target="_blank" rel="noopener noreferrer" class="button is-small is-light" title="View the source code"><span class="icon is-small"><i class="fa fa-file-code"></i></span><span>View Source</span></a><a href="https://github.com/JosephJShort/Jodo/issues/new" target="_blank" rel="noopener noreferrer" class="button is-small is-light requestExampleLink" title="Request an example for this topic"><span class="icon is-small"><i class="fa fa-comment-dots"></i></span><span>Request Example</span></a></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">DynamicInvoke</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button><a href="https://github.com/JosephJShort/Jodo/blob/main/src/Jodo.Primitives/DynamicInvoke.cs" target="_blank" rel="noopener noreferrer" class="button is-small is-light" title="View the source code"><span class="icon is-small"><i class="fa fa-file-code"></i></span><span>View Source</span></a><a href="https://github.com/JosephJShort/Jodo/issues/new" target="_blank" rel="noopener noreferrer" class="button is-small is-light requestExampleLink" title="Request an example for this topic"><span class="icon is-small"><i class="fa fa-comment-dots"></i></span><span>Request Example</span></a></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">DynamicInvoke</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button><a href="https://github.com/JosephJShort/Jodo/blob/main/src/Jodo.Primitives/DynamicInvoke.cs" target="_blank" rel="noopener noreferrer" class="button is-small is-light" title="View the source code"><span class="icon is-small"><i class="fa fa-file-code"></i></span><span>View Source</span></a><a href="https://github.com/JosephJShort/Jodo/issues/new" target="_blank" rel="noopener noreferrer" class="button is-small is-light requestExampleLink" title="Request an example for this topic"><span class="icon is-small"><i class="fa fa-comment-dots"></i></span><span>Request Example</span></a></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">DynamicInvoke</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button><a href="https://github.com/JosephJShort/Jodo/blob/main/src/Jodo.Primitives/DynamicInvoke.cs" target="_blank" rel="noopener noreferrer" class="button is-small is-light" title="View the source code"><span class="icon is-small"><i class="fa fa-file-code"></i></span><span>View Source</span></a><a href="https://github.com/JosephJShort/Jodo/issues/new" target="_blank" rel="noopener noreferrer" class="button is-small is-light requestExampleLink" title="Request an example for this topic"><span class="icon is-small"><i class="fa fa-comment-dots"></i></span><span>Request Example</span></a></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">DynamicInvoke</span> = <span class="keyword">class</span> <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_self" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">DynamicInvoke</span></dd></dl></div><h2 class="quickLinkHeader">Methods</h2><div id="IDAFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_AdditionOperator__1.htm">AdditionOperator<span id="LST2122269_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the addition operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_BitwiseComplementOperator__1.htm">BitwiseComplementOperator<span id="LST2122269_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the bitwise complement operator for <span class="parameter">T</span> using
                <span class="parameter">value</span> as the parameter. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_ConversionOperator__1.htm">ConversionOperator<span id="LST2122269_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td> </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_DecrementOperator__1.htm">DecrementOperator<span id="LST2122269_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the decrement operator for <span class="parameter">T</span> using
                <span class="parameter">value</span> as the parameter. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_DivisionOperator__1.htm">DivisionOperator<span id="LST2122269_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the division operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_EqualityOperator__1.htm">EqualityOperator<span id="LST2122269_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the equality for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters, returning the result of the operation.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_GreaterThanOperator__1.htm">GreaterThanOperator<span id="LST2122269_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the greater than operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_GreaterThanOrEqualOperator__1.htm">GreaterThanOrEqualOperator<span id="LST2122269_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the greater than or equal operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_IncrementOperator__1.htm">IncrementOperator<span id="LST2122269_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the increment operator for <span class="parameter">T</span> using
                <span class="parameter">value</span> as the parameter. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_InequalityOperator__1.htm">InequalityOperator<span id="LST2122269_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the inequality for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters, returning the result of the operation.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LeftShiftOperator__1.htm">LeftShiftOperator<span id="LST2122269_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the left-shift operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LessThanOperator__1.htm">LessThanOperator<span id="LST2122269_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the less than operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LessThanOrEqualOperator__1.htm">LessThanOrEqualOperator<span id="LST2122269_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the less than or equal operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LogicalAndOperator__1.htm">LogicalAndOperator<span id="LST2122269_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the logical AND operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LogicalExclusiveOrOperator__1.htm">LogicalExclusiveOrOperator<span id="LST2122269_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the logical exclusive OR operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_LogicalOrOperator__1.htm">LogicalOrOperator<span id="LST2122269_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the logical OR operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_MultiplicationOperator__1.htm">MultiplicationOperator<span id="LST2122269_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the multiplication operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_RemainderOperator__1.htm">RemainderOperator<span id="LST2122269_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the remainder operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_RightShiftOperator__1.htm">RightShiftOperator<span id="LST2122269_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the right-shift operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_SubtractionOperator__1.htm">SubtractionOperator<span id="LST2122269_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the subtraction operator for <span class="parameter">T</span> using
                <span class="parameter">left</span> and <span class="parameter">right</span> as the parameters. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_UnaryMinusOperator__1.htm">UnaryMinusOperator<span id="LST2122269_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the unary minus operator for <span class="parameter">T</span> using
                <span class="parameter">value</span> as the parameter. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr><tr><td><a href="M_Jodo_Primitives_DynamicInvoke_UnaryPlusOperator__1.htm">UnaryPlusOperator<span id="LST2122269_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST2122269_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
                Uses reflection to invoke the unary plus operator for <span class="parameter">T</span> using
                <span class="parameter">value</span> as the parameter. Returns the result of the operation
                or throws an <a href="https://learn.microsoft.com/dotnet/api/system.invalidoperationexception" target="_self" rel="noopener noreferrer">InvalidOperationException</a> if no such operator is defined.
            </td></tr></table></div><h2 class="quickLinkHeader">See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Jodo_Primitives.htm">Jodo.Primitives Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>Copyright © 2022 Joseph J. Short</p> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();
hljs.highlightAll();
});</script><script>
		$(".requestExampleLink").each(function ()
		{
			if(this.href.substring(0, 4).toLowerCase() === "http")
				this.href += "?title=";
			else
				this.href += "?subject=Jodo: ";

			this.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
				encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
				"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		});
	</script></body></html>